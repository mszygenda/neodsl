package org.neodsl.dsl.queries

import org.neodsl.queries.domain.{ Node, TypedNode }
import org.neodsl.queries.components.patterns.compositions.PatternComposition
import org.neodsl.queries.components.conditions.Condition
import org.neodsl.queries.SelectQuery
import org.neodsl.db.{ExecutionEngine}

/**
 * It's generated source file. Don't modify it (Change template instead)
 */
class SelectQuery{{n}}[{{#types}}{{name}} >: Null <: TypedNode[{{name}}]{{^isLast}}, {{/isLast}}{{/types}}](nodes: List[Node], patterns: PatternComposition, conditions: Condition) extends SelectQuery(nodes, patterns, conditions) {
  def exec[U](processResult: ({{#types}}{{name}}{{^isLast}}, {{/isLast}}{{/types}}) => U)(implicit engine: ExecutionEngine): Seq[U] = {
    nodes match {
        case {{#types}}node{{name}}{{^isLast}} :: {{/isLast}}{{/types}} :: Nil => {
            super.exec.map(resultMap => {
              processResult(
                {{#types}}
                    resultMap(nameResolver.name(node{{name}})).asInstanceOf[{{name}}]{{^isLast}},{{/isLast}}
                {{/types}}
              )
            })
        }
        case _ => {
            throw new Exception("Invalid number of nodes selected for SelectQuery{{n}}. It should be {{n}} nodes")
        }
    }
  }
}